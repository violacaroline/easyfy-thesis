@rendermode InteractiveServer
@using ProductDescriptionFrontend
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject HttpClient httpClient

<div>
    <label for="keywords">Keywords: </label>
    <br>
    <textarea class="form-control" id="keywords" type="text" @bind="keywords" @oninput="OnInputEvent"></textarea>
</div>

<div>
    <label for="systemMessage">systemMessage: </label>
    <br>
    <textarea class="form-control"  id="systemMessage" type="text" @bind="systemMessage" @oninput="OnSystemInputEvent"></textarea>
</div>

<div>
    <label for="temperature">Temperature: </label>
    <br>
    <select class="form-control" id="temperature" @bind="temperature">
        @for (decimal i = 0.1m; i <= 2.0m; i = decimal.Add(i, 0.1m))
        {
            <option value="@i.ToString("0.0")">@i.ToString("0.0")</option>
        }
    </select>
</div>

<br>

<div>
    <button @onclick="OutputText">Generate Description</button>
    <p role="status">@textToOutput</p>
</div>

@code {
    private string textToOutput;
    private string temperature = "1.0"; // Set a default value for temperature


    private string keywords = "";
    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        keywords = (string)changeEvent.Value;
    }

    private string systemMessage = "";
    private void OnSystemInputEvent(ChangeEventArgs changeEvent)
    {
        systemMessage = (string)changeEvent.Value;
    }

    /// <summary>
    /// Makes request to generate description.
    /// </summary>
    /// <returns></returns>
    private async Task OutputText()
    {
        try
        {
            Console.WriteLine("OutputText method called");
             var formattedTemperature = temperature.Replace(',', '.');
            
            var response = await httpClient.PostAsJsonAsync("http://localhost:5000/product-description/generate", new
            {
                temperature = $"{formattedTemperature}",
                systemMessage = $"{systemMessage}",
                userMessage = $"{keywords}"
            });

            if (response.IsSuccessStatusCode)
            {
                textToOutput = await response.Content.ReadAsStringAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {errorContent}");
                textToOutput = "Error: " + response.ReasonPhrase + " - " + errorContent;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
                textToOutput = "Request failed: " + ex.Message;
        }
    }
}
