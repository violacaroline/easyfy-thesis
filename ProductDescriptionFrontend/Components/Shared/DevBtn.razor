@rendermode InteractiveServer
@using ProductDescriptionFrontend
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json
@using ProductDescriptionFrontend.Components.Shared
@inject ProductDescriptionService ProductDescriptionService


<div>
    <TextInput Label="Product Name:" @bind-Value="productName" />
    <TextArea Label="Product Attributes:" @bind-Value="keywords" />
    <TextArea Label="systemMessage:" @bind-Value="systemMessage" />
</div>

<div>
    <label for="temperature">Temperature: </label>
    <br>
    <select class="form-control" id="temperature" @bind="temperature">
        @for (decimal i = 0.1m; i <= 2.0m; i = decimal.Add(i, 0.1m))
        {
            <option value="@i.ToString("0.0")">@i.ToString("0.0")</option>
        }
    </select>
</div>

<br>

<div>
    <button @onclick="OutputText">Generate Description</button>
    <p role="status">@textToOutput</p>
</div>

@code {
    private string textToOutput;
    private string temperature = "1.0"; // Set a default value for temperature

private string productName = "";
private string systemMessage = "";

    private string keywords = "";
   private void OnChangeEvent(ChangeEventArgs changeEvent, string propertyName)
{
    var value = (string)changeEvent.Value;
    if (propertyName == "keywords")
    {
        keywords = value;
    }
    else if (propertyName == "productName")
    {
        productName = value;
    }
    else if (propertyName == "systemMessage")
    {
        productName = value;
    }
}

    /// <summary>
    /// Makes request to generate description.
    /// </summary>
    /// <returns></returns>
     private async Task OutputText()
    {
        textToOutput = await ProductDescriptionService.GenerateProductDescriptionAsync(productName, keywords, systemMessage, temperature);
    }
}
