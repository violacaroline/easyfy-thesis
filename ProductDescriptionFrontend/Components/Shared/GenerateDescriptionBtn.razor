@rendermode InteractiveServer
@using ProductDescriptionFrontend
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json


@* <input type="text" @oninput="OnInputEvent"> *@
<div>
    <label for="keywords">Keywords: </label>
    <br>
    <textarea class="form-control" id="keywords" type="text" @bind="keywords" @oninput="OnInputEvent"></textarea>
</div>

<div>
    <label for="systemMessage">systemMessage: </label>
    <br>
    <textarea class="form-control"  id="systemMessage" type="text" @bind="systemMessage" @oninput="OnSystemInputEvent"></textarea>
</div>
<div>


</div>

<div>
    <button class="btn btn-primary" @onclick="OutputText">Generate Description</button>
    <p role="status">@textToOutput</p>
</div>


@code {
    private string textToOutput;
    private HttpClient httpClient;


    protected override void OnInitialized()
    {
        httpClient = new HttpClient();
    }


    private string keywords = "";
    private void OnInputEvent(ChangeEventArgs changeEvent)

    {
        keywords = (string)changeEvent.Value;
    }

    private string systemMessage = "";
    private void OnSystemInputEvent(ChangeEventArgs changeEvent)

    {
        systemMessage = (string)changeEvent.Value;
    }

    /// <summary>
    /// Makes request to generate description.
    /// </summary>
    /// <returns></returns>
   private async Task OutputText()
{
    try
    {
        Console.WriteLine("OutputText method called");
        Console.WriteLine(systemMessage);
        Console.WriteLine(keywords);
        var response = await httpClient.PostAsJsonAsync("http://localhost:5000/product-description/generate", new
        {
            systemMessage = $"{systemMessage}",
            userMessage = $"{keywords}"
        });

        if (response.IsSuccessStatusCode)
        {
            textToOutput = await response.Content.ReadAsStringAsync();
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error content: {errorContent}");
            textToOutput = "Error: " + response.ReasonPhrase + " - " + errorContent;
        }
    }
    catch (HttpRequestException ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
            textToOutput = "Request failed: " + ex.Message;
    }
}

}